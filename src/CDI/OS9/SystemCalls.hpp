#ifndef CDI_OS9_SYSTEMCALLS_HPP
#define CDI_OS9_SYSTEMCALLS_HPP

#include "../cores/SCC68070/SCC68070.hpp"

namespace OS9
{

enum class SystemCallType
{
    F_Link = 0x0000,
    F_Load = 0x0001,
    F_UnLink = 0x0002,
    F_Fork = 0x0003,
    F_Wait = 0x0004,
    F_Chain = 0x0005,
    F_Exit = 0x0006,
    F_Mem = 0x0007,
    F_Send = 0x0008,
    F_Icpt = 0x0009,
    F_Sleep = 0x000A,
    F_SSpd = 0x000B,
    F_ID = 0x000C,
    F_SPrior = 0x000D,
    F_STrap = 0x000E,
    F_PErr = 0x000F,
    F_PrsNam = 0x0010,
    F_CmpNam = 0x0011,
    F_SchBit = 0x0012,
    F_AllBit = 0x0013,
    F_DelBit = 0x0014,
    F_Time = 0x0015,
    F_STime = 0x0016,
    F_CRC = 0x0017,
    F_GPrDsc = 0x0018,
    F_GBlkMp = 0x0019,
    F_GModDr = 0x001A,
    F_CpyMem = 0x001B,
    F_SUser = 0x001C,
    F_UnLoad = 0x001D,
    F_RTE = 0x001E,
    F_GPrDBT = 0x001F,
    F_Julian = 0x0020,
    F_TLink = 0x0021,
    F_DFork = 0x0022,
    F_DExec = 0x0023,
    F_DExit = 0x0024,
    F_DatMod = 0x0025,
    F_SetCRC = 0x0026,
    F_SetSys = 0x0027,
    F_SRqMem = 0x0028,
    F_SRtMem = 0x0029,
    F_IRQ = 0x002A,
    F_IOQu = 0x002B,
    F_AProc = 0x002C,
    F_NProc = 0x002D,
    F_VModul = 0x002E,
    F_FindPD = 0x002F,
    F_AllPD = 0x0030,
    F_RetPD = 0x0031,
    F_SSvc = 0x0032,
    F_IODel = 0x0033,
    F_GProcP = 0x0037,
    F_Move = 0x0038,
    F_AllRAM = 0x0039,
    F_Permit = 0x003A,
    F_Protect = 0x003B,
    F_AllTsk = 0x003F,
    F_DelTsk = 0x0040,
    F_AllPrc = 0x004B,
    F_DelPrc = 0x004C,
    F_FModul = 0x004E,
    F_SysDbg = 0x0052,
    F_Event = 0x0053,
    F_Gregor = 0x0054,
    F_SysID = 0x0055,
    F_Alarm = 0x0056,
    F_SigMask = 0x0057,
    F_ChkMem = 0x0058,
    F_UAcct = 0x0059,
    F_CCtl = 0x005A,
    F_GSPUMp = 0x005B,
    F_SRqCMem = 0x005C,
    F_POSK = 0x005D,
    F_Panic = 0x005E,
    F_MBuf = 0x005F,
    F_Trans = 0x0060,
    I_Attach = 0x0080,
    I_Detach = 0x0081,
    I_Dup = 0x0082,
    I_Create = 0x0083,
    I_Open = 0x0084,
    I_MakDir = 0x0085,
    I_ChgDir = 0x0086,
    I_Delete = 0x0087,
    I_Seek = 0x0088,
    I_Read = 0x0089,
    I_Write = 0x008A,
    I_ReadLn = 0x008B,
    I_WritLn = 0x008C,
    I_GetStt = 0x008D,
    I_SetStt = 0x008E,
    I_Close = 0x008F,
};

enum class Event
{
    Ev_Link = 0x0000,
    Ev_UnLnk = 0x0001,
    Ev_Creat = 0x0002,
    Ev_Delet = 0x0003,
    Ev_Wait = 0x0004,
    Ev_WaitR = 0x0005,
    Ev_Read = 0x0006,
    Ev_Info = 0x0007,
    Ev_Signl = 0x0008,
    Ev_Signl_Ev_All = 0x8008,
    Ev_Pulse = 0x0009,
    Ev_Pulse_Ev_All = 0x8009,
    Ev_Set = 0x000A,
    Ev_Set_Ev_All = 0x800A,
    Ev_SetR = 0x000B,
    Ev_SetR_Ev_All = 0x800B,
};

enum class Error
{
    E_1 = 1,
    E_2 = 2,
    E_3 = 3,
    E_4 = 4,

    E_IllFnc = 64,
    E_FmtErr = 65,
    E_NotNum = 66,
    E_IllArg = 67,

    E_BusErr = 102,
    E_AdrErr = 103,
    E_IllIns = 104,
    E_ZerDiv = 105,
    E_Chk = 106,
    E_TrapV = 107,
    E_Violat = 108,
    E_Trace = 109,
    E_1010 = 110,
    E_1111 = 111,

    E_113 = 113,
    E_114 = 114,
    E_115 = 115,
    E_124 = 124,

    E_Trap1 = 133,
    E_Trap2 = 134,
    E_Trap3 = 135,
    E_Trap4 = 136,
    E_Trap5 = 137,
    E_Trap6 = 138,
    E_Trap7 = 139,
    E_Trap8 = 140,
    E_Trap9 = 141,
    E_Trap10 = 142,
    E_Trap11 = 143,
    E_Trap12 = 144,
    E_Trap13 = 145,
    E_Trap14 = 146,
    E_Trap15 = 147,
    E_FPUnordC = 148,
    E_FPInxact = 149,
    E_FPDivZer = 150,
    E_FPUndrFl = 151,
    E_FPOprErr = 152,
    E_FPOverFl = 153,
    E_FPNotNum = 154,
    E_155 = 155,
    E_156 = 156,
    E_157 = 157,
    E_158 = 158,

    E_Permit = 164,
    E_Differ = 165,
    E_StkOvf = 166,
    E_EvntID = 167,
    E_EvNF = 168,
    E_EvBusy = 169,
    E_EvParm = 170,
    E_Damage = 171,
    E_BadRev = 172,
    E_PthLost = 173,
    E_BadPart = 174,
    E_Hardware = 175,
    E_SectSize = 176,

    E_PthFul = 200,
    E_BPNum = 201,
    E_Poll = 202,
    E_BMode = 203,
    E_DevOvf = 204,
    E_BMID = 205,
    E_DirFul = 206,
    E_MemFul = 207,
    E_UnkSvc = 208,
    E_ModBsy = 209,
    E_BPAddr = 210,
    E_EOF = 211,
    E_VctBsy = 212,
    E_NES = 213,
    E_FNA = 214,
    E_BPNam = 215,
    E_PNNF = 216,
    E_SLF = 217,
    E_CEF = 218,
    E_IBA = 219,
    E_HangUp = 220,
    E_MNF = 221,
    E_NoClk = 222,
    E_DelSP = 223,
    E_IPrcID = 224,
    E_Param = 225,
    E_NoChld = 226,
    E_ITrap = 227,
    E_PrcAbt = 228,
    E_PrcFul = 229,
    E_IForkP = 230,
    E_KwnMod = 231,
    E_BMCRC = 232,
    E_USigP = 233,
    E_NEMod = 234,
    E_BNam = 235,
    E_BMHP = 236,
    E_NoRAM = 237,
    E_DNE = 238,
    E_NoTask = 239,
    E_Unit = 240,
    E_Sect = 241,
    E_WP = 242,
    E_CRC = 243,
    E_Read = 244,
    E_Write = 245,
    E_NotRdy = 246,
    E_Seek = 247,
    E_Full = 248,
    E_BTyp = 249,
    E_DevBsy = 250,
    E_DIDC = 251,
    E_Lock = 252,
    E_Share = 253,
    E_DeadLk = 254,
    E_Format = 255,
};

struct SystemCall
{
    SystemCallType type; /**< The type of the system call. */
    std::string module; /**< The module where the call occured. */
    std::string inputs; /**< The input parameters. */
    std::string outputs; /**< The output parameters. it is at the beginning of the call and has to be filled by the application when RTE is executed. */
};

std::string eventNameToString(const Event evt);
std::string eventInputsToString(const Event evt, const std::map<SCC68070::Register, uint32_t>& regs, const std::function<const uint8_t*(const uint32_t)>& get);
std::string eventOutputsToString(const Event evt, const std::map<SCC68070::Register, uint32_t>& regs, const std::function<const uint8_t*(const uint32_t)>& get);

std::string systemCallNameToString(const SystemCallType call);
std::string systemCallInputsToString(const SystemCallType call, const std::map<SCC68070::Register, uint32_t>& regs, const std::function<const uint8_t*(const uint32_t)>& get);
std::string systemCallOutputsToString(const SystemCallType call, const std::map<SCC68070::Register, uint32_t>& regs, const std::function<const uint8_t*(const uint32_t)>& get);

std::string errorNameToString(const Error error);

} // namespace OS9

#endif // CDI_OS9_SYSTEMCALLS_HPP
